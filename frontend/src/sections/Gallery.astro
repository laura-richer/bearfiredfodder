---
import getUrlForImage from '@/utils/getUrlForImage';
import Button from '@/components/Button.astro';

const { title, images, id } = Astro.props;
---

<section id={id} class="gallery">
  <div class="container gallery__container">
    <h2>{title}</h2>

    <div class="gallery__image-wrapper">
      <div id="gallery-images" class="gallery__images">
        {images.map(image => <img src={`${getUrlForImage(image).url()}?w=640&q=80`} alt={image.alt} />)}
      </div>

      <div class="gallery__navigation"></div>
    </div>

    <div class="gallery__skip-button">
      <Button text="Skip to contact details" link="#contact" />
    </div>

  </div>
</section>

<script>
import debounce from 'lodash/debounce';
import Macy from 'macy';

const gallery = document.querySelector('.gallery');
const galleryImageWrapper = document.querySelector('.gallery__image-wrapper');
const galleryImages = document.querySelector('#gallery-images');
const skipButton = document.querySelector('.gallery__skip-button');
const galleryNavigation = document.querySelector('.gallery__navigation');
const breakpoint = getComputedStyle(document.documentElement).getPropertyValue(
  '--breakpoint-desktop'
);

const setMobileBreakpoint = () => {
  return !window.matchMedia(`(min-width: ${breakpoint})`).matches;
};

let mobileBreakpoint = setMobileBreakpoint();

const macy = Macy({
  container: '#gallery-images',
  margin: 20,
  columns: 4,
  breakAt: {
    1440: 3,
    1024: 2,
    680: 1,
  },
});

const buildGalleryNavigationItems = navigationCount => {
  const galleryNavigationItemActiveClass = 'gallery__navigation-item--active';

  // Clear navigation items to re render based on new size
  galleryNavigation.innerHTML = '';

  // Build gallery navigation items
  // TODO write this better
  for (let index = 0; index < navigationCount; index++) {
    const galleryNavigationItem = document.createElement('span');
    galleryNavigationItem.classList.add('gallery__navigation-item');
    galleryNavigationItem.dataset.slide = index;

    if (index === 0) galleryNavigationItem.classList.add(galleryNavigationItemActiveClass);

    galleryNavigationItem.addEventListener('click', event => {
      galleryNavigation.childNodes.forEach(galleryItemNavigation => {
        galleryItemNavigation.classList.remove(galleryNavigationItemActiveClass);
      });

      event.target.classList.add(galleryNavigationItemActiveClass);
      const { slide } = event.target.dataset;
      galleryImages.style.transform = `translateY(-${slide * 500}px)`;
    });

    galleryNavigation.append(galleryNavigationItem);
  }
};

const toggleNavigationType = (isMobile, navigationItemCount) => {
  skipButton.style.display = navigationItemCount <= 1 ? 'none' : isMobile ? 'flex' : 'none';
  galleryNavigation.style.display = navigationItemCount <= 1 ? 'none' : isMobile ? 'none' : 'flex';
};

const resetGalleryToTop = () => {
  galleryImageWrapper.scrollTop = 0;
  galleryImages.style.transform = `translateY(0)`;
};

const handleRenderGalleryNavigation = debounce(() => {
  const galleryNavigationItemCount = Math.ceil(galleryImages.clientHeight / 500);
  mobileBreakpoint = setMobileBreakpoint();

  toggleNavigationType(mobileBreakpoint, galleryNavigationItemCount);
  resetGalleryToTop();

  if (galleryNavigationItemCount <= 1 || mobileBreakpoint) return;

  buildGalleryNavigationItems(galleryNavigationItemCount);
}, 300);

const handleScroll = () => {
  if (!mobileBreakpoint) return;

  const galleryPosition = gallery.getBoundingClientRect().top;
  galleryImageWrapper.style.overflow = galleryPosition < 55 ? 'auto' : 'hidden';
};

macy.runOnImageLoad(handleRenderGalleryNavigation);
macy.on(macy.constants.EVENT_RESIZE, handleRenderGalleryNavigation);

window.addEventListener('scroll', handleScroll);

const galleryObserver = new IntersectionObserver(
  entries => {
    entries.forEach(entry => {
      const { isIntersecting } = entry;
      if (!mobileBreakpoint) return;

      skipButton.style.transform = isIntersecting ? 'translateY(0)' : 'translateY(100px)';
    });
  },
  { threshold: 0.3 }
);

const contactObserver = new IntersectionObserver(
  entries => {
    entries.forEach(entry => {
      const { isIntersecting } = entry;
      if (!mobileBreakpoint) return;

      skipButton.style.transform = isIntersecting ? 'translateY(100px)' : 'translateY(0)';
    });
  },
  { threshold: 0.3 }
);

galleryObserver.observe(document.querySelector('.gallery'));
contactObserver.observe(document.querySelector('.contact'));
</script>

<style lang="scss" is:global>
  .gallery {
    position: relative;
    background: var(--color-grey) url('/images/bff-flame-cutoff-gallery.png') no-repeat left bottom;
    background-size: auto 270px;

    &:after {
      position: absolute;
      content: '';
      width: 100%;
      height: 100px;
      background: transparent;
      background: linear-gradient(
        0deg,
        rgba(2, 0, 36, 1) 0%,
        rgba(48, 48, 48, 1) 0%,
        rgba(255, 255, 255, 0) 100%
      );
      bottom: 0;
      left: 0;
    }

    &__container {
      padding-bottom: 0;
    }

    &__image-wrapper {
      position: relative;
      max-height: 500px;
      overflow: auto;

      @media screen and (min-width: 768px) {
        max-height: 750px;
      }

      @media screen and (min-width: 1024px) {
        overflow: hidden;
      }
    }

    &__images {
      transition: transform 0.7s ease-in-out;

      @media screen and (min-width: 1024px) {
        width: calc(100% - 3rem);
      }
    }

    &__navigation {
      position: absolute;
      right: 0;
      top: 50%;
      display: flex;
      flex-direction: column;
      z-index: 10;
      gap: 0.5rem;

      &-item {
        cursor: pointer;
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        background-color: var(--color-black);
        transition: background-color 0.3s ease-in-out;

        &--active,
        &:hover,
        &:focus {
          background-color: var(--color-red);
        }
      }
    }

    &__skip-button {
      position: fixed;
      // display: none;
      justify-content: center;
      left: 0;
      right: 0;
      bottom: var(--spacer-s);
      z-index: 9999;
      left: 0;
      right: 0;
      margin: auto;
      transform: translateY(100px);
      transition: transform 0.25s ease-in-out;
    }

    &__navigation {
      display: none;
    }
  }
</style>
